# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  - master

pr:
  autoCancel: "true"

pool:
  vmImage: "windows-latest"

steps:
  - checkout: self
    submodules: false
    displayName: "Checkout repository"
  - script: |
      git submodule sync
      git submodule update --init --force themes/hugo-admonitions
    displayName: "Initialize theme submodule"

  - script: |
      echo "Checking hugo-admonitions theme files..."
      ls -la themes/hugo-admonitions/
      echo "Checking for theme.yaml..."
      cat themes/hugo-admonitions/theme.yaml
      echo "Checking for render template..."
      ls -la themes/hugo-admonitions/layouts/_default/_markup/
    displayName: "Verify theme files"

  - task: PowerShell@2
    name: ResourcesJSON
    displayName: "Generating Resources JSON from PSGallery"
    inputs:
      filePath: "./Get-DscResourceKitInfo.ps1"
      pwsh: true
      errorActionPreference: continue

  # - task: giuliovdev.hugo-extension.hugo-build-task-v2.HugoTask@2
  #   displayName: "Generate Hugo site"
  #   inputs:
  #     destination: "$(Build.ArtifactStagingDirectory)"
  #     hugoVersion: 0.135.0

  - pwsh: |
      $versionsConfig = Get-Content -Path ".\.versions.json" -Raw | ConvertFrom-Json
      $hugoVersion = $versionsConfig.hugo.version
      $hugoUrl = "https://github.com/gohugoio/hugo/releases/download/v$hugoVersion/hugo_extended_${hugoVersion}_windows-amd64.zip"
      $outputPath = ".\hugo.zip"
      Invoke-WebRequest -Uri $hugoUrl -OutFile $outputPath
      Expand-Archive -Path $outputPath -DestinationPath ".\hugo"
    displayName: "Download and Extract Hugo"

  - pwsh: |
      .\hugo\hugo.exe --source "$(System.DefaultWorkingDirectory)" --destination "$(Build.ArtifactStagingDirectory)" --printI18nWarnings --printPathWarnings --logLevel debug --theme dot hugo-admonitions
    displayName: "Build Hugo Site"

  - script: |
      echo "Checking if admonitions CSS was generated..."
      find "$(Build.ArtifactStagingDirectory)" -name "*admonition*" -type f
      echo "Checking blog post HTML for admonitions..."
      grep -l "admonition" "$(Build.ArtifactStagingDirectory)/blog/your-first-class-based-microsoft-dsc-v3-resource/index.html" || echo "No admonitions found in blog post"
    displayName: "Verify admonitions in build"

  - task: PublishPipelineArtifact@0
    displayName: "Publish Hugo site as artifact"
    inputs:
      artifactName: "dsccommunity"
      targetPath: "$(Build.ArtifactStagingDirectory)"
